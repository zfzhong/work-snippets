11/06
======
1. Installed SloggerTablet on two Pixel Tablets. The Pixel Tablets has Android 14 system, which has specific requirement on two permission:
    <uses-permission android:name="android.permission.SCHEDULE_EXACT_ALARM" />
    <uses-permission android:name="android.permission.FOREGROUND_SERVICE_DATA_SYNC"/>

    ref: https://medium.com/@aarie33/schedule-exact-alarms-are-denied-by-default-onandroid-14-ccbfbf54586c

    I changed code to make it work. For BLE scan, we launch a scan every 20 seconds, and each scanning lasts for 10 seconds. We only record the scanned device if it has a deviceName (otherwise we ignore). This also requires change to the code on bufferedWriter.  

11/07
======
1. Work on aws server database tables: UsblLong, RecvIms, FishData. The purpose is to upload all data to the server and generate figures on the server automatically.
2. We need to change the way to send sync packages to the Fish from the Top. We should use SENDIMS command.
3. We need to have the concept of 'experiment'. For each experiment, we have a specific series of figures to display.
4. Created a new msg structure under usbl_interfaces/UsblLong.msg, which is the exact message stucture as USBLLONG. The privious USBLFixRaw structure will not be used anymore. Need to rebuild this msg type tho.
5. upload data to server via different url.
6. GPS somehow is not working (probably need to do raspi-config)


11/08
======
1. Published Slogger App 1.6.3 to the Google Play Store. Somehow the signing key was missing from directory .../outputs/keys, I had to regenerate one, the keystore file is
/Users/zfz/workspace/slogger/app/build/outputs/keystorefileforsloggerapp1

2. Published SloggerTablet 1.6.3 to the Google Play Store, too.

3. Write python code to populate the USBLLONG database.

11/09
======
1. Generated plots using plotly for robotics data. Still, the FishData needs to be populated.
2. We need an expgroup design, so that an expgroup can have many  experiments (on that day). We would like to plot all figures for that expgroup on the same page.  


11/10
======
1. While processing the FishData, I found that there's duplicated packets received (same seqNum from fish, different receiving time). We need to catch this error/duplication when write to db from the lake.
2. Displayed multiple figures in a signle webpage for the same exp group.
3. Website for robotics project done.

11/11
======
1. Spent the whole afternoon with Titon to print the mounting board for the Fish.
2. Created models for Kaleidomath: Source, MathTag, TagRelation, MathProblem.
3. Shooting practice with WZ, I found that he needs to change his shooting form (his left hand is block his right hand). He was reluctant to change.

11/12
======
1. Installed the mounting board, did some soldering, waiting for parts. Bought o rings.
2. Can't use the air decompresser to check the air tightness, coz some parts missing.
3. Write parser to parse all AMC8 Problems and populated db on server.

11/13
====
1. Found a bug in amc_problem_raw_parser.py: it didn't process the itemization correctly (for example, AMC10 2019 10A, p9). Should fix this. 
2. Assembled fish with the 3D-printed mounting board. Will do soldering tomorrow.

11/14
======
1. Get response from Withings about data gap. Wrote scripts to merge the data and plot.
2. Fixed the amc parser bug to handle itemization correctly.
3. Assembled the Fish, did all soldering again with Titon. Tested air tightness in the Platt pool, still has leakage.

11/15
======
1. Fixed the sealing problem for the Fish, they O rings I bought from ACE hardware worked well. It looked slightly larger than the circumference of the flange, but that's exactly the reason why it works.
2. The raspberry pi 4 was actually damaged because of water. Its wireless interface could not be identified after booting. I have to replace it with a raspberry pi 3 and reconfigure it (raspi-config, i2c, serial, etc).
3. Went to the lake (set out at 3:40 pm, started testing at the dock around 5 pm). I realized that I have changed too much code and I need to rebuild them. The funny thing is the ROS2 build tool relies on file timestamp to build new changes. I scp the CMakelist file and it didn't work because the timestamp. I spent one hour to debug there on the dock. Didn't really get the data sent to server successfully. I dropped my iphone into the lake when I collect my folding chairs. The water was about 6 m in depth. I couldn't get it back. It's a bad day. 

11/16
======
1. Teaching, basketball traing with kids, watch football game (gamecocks vs misourri tigers).
2. Started withings test.


11/17
======
1. The withings data looks good, no gaps anymore. I guess they fixed their API.
2. Added jquery to the show_problem.html
3. Need properly design the UI for kaleidomath: 1) functionality to add/remove a MathTag to/from a problem; 2) functionality to list all problems given a MathTag; 3) Add one/many problems to a problem batch, and generate PDF for a batch of problems (here we need to introduce the concept 'batch', which is a list of problems customized by a user).
4. More on problem 'batch': a) user can generate pdf only when it 'lock' the batch; b) user can 'unlock' the batch and edit it; c) whenever the user lock the batch, there will be a log generated with a summary like "locked on 11/17/2024 HH:MM:SS, with 35 problems. The idea here is to let the user to track the editing history of the batch, not the details about what has been changed. 
5. Since the gps node is not working, it complains that /dev/serial0 is busy, I stopped the service of gpsd and it worked. 
6. Fixed usbl_interfaces/msg/UsblLong.msg problem: deleting the build/ directory and rebuild.
7. Fixed the bugs in py_msg_process.py, the datetimefield in django problem (should pass  datetime.isoformat() in http post request parameters).
8. William went to AAU basketball tryout, he did a good job there: good defense, he missed a free throw, but made a 3-pointer and a layup.
9. Did air test for USBL top/fish. Fixed all issues: uploading fishdata to the server, change source levels.

11/18
======
1. The Fish side evologics_driver.py should be rewritten. It's quite different from the Top side. Actually both the top side and fish side should inherit from a parent class. Basically, we need to restructure the code.
2. Right now we just need to process data offline, then we should have the msg_processor.py to process the raw signal data from USBL.
3. Did 6-hour testing on Lake Murray. The USBL's auto source level adpation didn't work well. Sometimes the Top changed its source level, the Fish never change. Not sure why.
4. Observations: The Fish sometimes drop about 50 packages (depth data), and the time_sent and time_recv has about 3 min difference. There seems to be congestions on the Fish side (too many packages queued to be sent?) note that time_sent is not the time to transmit, it's the time to pass to the hardware to transmit (it might get delayed if congestion happens). We should also measure the congestion status also.
5. I forgot I implemented command control to transmit cmd message ot the Fish to ask it to stop/resume transmission or change source level. Anyway, right now we include the Top's source level in its sync message and the fish will change its source level once it receives the sync message.


